- hosts: localhost
  connection: local
  tasks:
    - name: set fact
      set_fact:
        date: "{{lookup('pipe','date +%Y%m%d')}}"
        upstream: bionic
        docker_group: docker
        user_name: tt
    - debug: msg="date={{ date }}, upstream={{ upstream }}"
#######################################
# add apt repositories
#######################################
    - name: add apt repositories
      apt_repository: repo={{ item }}
      become: true
      with_items:
        - ppa:philip.scott/elementary-tweaks
        - ppa:fish-shell/release-3
#--------------------------------------
# docker
#--------------------------------------
    - name: Add Docker GPG key
      become: true
      apt_key: url=https://download.docker.com/linux/ubuntu/gpg
    - name: add Docker apt repository
      apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ upstream }} stable"
      become: yes
#######################################
# apt
#######################################
    - name: apt install
      tags:
        - apt-install
      become: true
      apt:
        update_cache: yes
        cache_valid_time: 3600
        pkg:
          - git
          - curl
          - byobu
          - build-essential # make, gcc(GNU Compiler Collection); library package; @see https://packages.ubuntu.com/xenial/build-essential
          - libreadline-dev # GNU readline
          - zlib1g-dev # compression library package; @see https://packages.ubuntu.com/xenial/zlib1g-dev
          - fcitx-mozc
          - xclip
          - snapd
          - libinput-tools
          - xdotool
          - elementary-tweaks
          - software-properties-common
          - gdebi # install deb files. It lets you install local deb packages resolving and installing its dependencies.
          - python-apt
          - fish
          - apt-transport-https # for docker
          - ca-certificates # for docker
          - gnupg-agent # for docker
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - neovim
          - fonts-powerline
          - dconf-editor
          - peco
          - wine-stable
          - firefox
          # â†“ k8s, minikube {
          # sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils
          - qemu-kvm
          - libvirt-bin
          - ubuntu-vm-builder
          - virt-top
          - libguestfs-tools
          - virtinst
          - bridge-utils
          - virt-manager
          # }
#######################################
# anyenv
#######################################
    - name: Install anyenv
      git: repo={{ item.repo }} dest={{ item.dest }} update=no
      with_items:
        - { repo: "https://github.com/anyenv/anyenv",
            dest: "~/.anyenv"
          }
        - {
            repo: "https://github.com/znz/anyenv-update.git",
            dest: "~/.anyenv/plugins/anyenv-update",
          }
        - {
            repo: "https://github.com/znz/anyenv-git.git",
            dest: "~/.anyenv/plugins/anyenv-git",
          }
    - name: Update anyenv
      shell: |
        eval "$(anyenv init -)"
        anyenv update
        rm -f /tmp/anyenv-updated-*
        touch /tmp/anyenv-updated-{{ date }}
      args:
        executable: /bin/bash
        creates: /tmp/anyenv-updated-{{ date }}
    - name: Install envs
      shell: |
        eval "$(anyenv init -)"
        anyenv install {{ item.env }}
        eval "$(anyenv init -)"
        {{ item.env }} install {{ item.version  }}
        {{ item.env }} rehash
      args:
        executable: /bin/bash
        creates: ~/.anyenv/envs/{{ item.env }}/versions/{{ item.version }}
      with_items:
        - { env: "rbenv", version: "2.7.0" }
        - { env: "goenv", version: "1.13.6" }
#######################################
# docker-compose
#######################################
    - name: Install Docker Compose
      get_url:
        url: https://github.com/docker/compose/releases/download/1.25.3/docker-compose-Linux-x86_64
        dest: /usr/local/bin/docker-compose
        mode: 'u+x,g+x'
#######################################
# Manage Docker as a non-root user @see https://docs.docker.com/install/linux/linux-postinstall/
#######################################
    # sudo groupadd docker
    - name: Ensure "docker" group exists
      become: yes
      group:
        name: "{{ docker_group }}"
        state: present
    # sudo usermod -aG docker $USER
    - name: 'Add "{{ user_name }}" to "docker" group'
      become: yes
      user:
        name: "{{ user_name }}"
        group: "{{ docker_group }}"
        append: yes
#######################################
# fusuma
#######################################
    - name: Install Fusuma
      shell: gem install fusuma
      args:
        executable: /bin/bash
        creates: ~/.anyenv/envs/rbenv/shims/fusuma
    - name: 'Add "{{ user_name }}" to Input group'
      become: yes
      user:
        name: "{{ user_name }}"
        group: input
        append: yes
#######################################
# Neovim
# sudo update-alternatives --install /usr/bin/vi vi /usr/bin/nvim 60
# sudo update-alternatives --config vi
# sudo update-alternatives --install /usr/bin/vim vim /usr/bin/nvim 60
# sudo update-alternatives --config vim
# sudo update-alternatives --install /usr/bin/editor editor /usr/bin/nvim 60
# sudo update-alternatives --config editor
#######################################
    - name: use nvim for vi
      become: yes
      alternatives:
        name: vi
        path: /usr/bin/nvim
        priority: 60
    - name: use nvim for vim
      become: yes
      alternatives:
        name: vim
        path: /usr/bin/nvim
        priority: 60
    - name: use nvim for editor
      become: yes
      alternatives:
        name: editor
        path: /usr/bin/nvim
        priority: 60
#######################################
# Font mzyy94/RictyDiminished-for-Powerline
#######################################
# https://github.com/LAKuEN/dotfiles/blob/master/ubuntu_setup.sh:w
# not yet

#######################################
# Chrome 
#######################################
# not yet
# cd ~/Downloads
# gdebi google-chrome-stable_current_amd64.deb

#######################################
# Albert launcher @see https://github.com/albertlauncher/albert
#######################################
# not yet
# https://download.opensuse.org/repositories/home:/manuelschneid3r/xUbuntu_18.04/amd64/albert_0.16.1_amd64.deb
# cd ./Downloads
# sudo gdebi albert_0.16.1_amd64.deb

#######################################
# Slack for ubuntu-18-04 @see https://linuxize.com/post/how-to-install-slack-on-ubuntu-18-04/
#######################################
# not yet
# cd ~/Downloads
# wget https://downloads.slack-edge.com/linux_releases/slack-desktop-4.0.2-amd64.deb
# sudo apt install ./slack-desktop-*.deb

#######################################
# use KVM @see https://computingforgeeks.com/install-kvm-centos-rhel-ubuntu-debian-sles-arch/
# @see https://help.ubuntu.com/community/KVM/Installation
#######################################
# sudo modprobe vhost_net
# sudo lsmod | grep vhost
# echo "vhost_net" | sudo tee -a /etc/modules

#######################################
# Download minikube @see https://computingforgeeks.com/how-to-install-minikube-on-ubuntu-18-04/
#######################################
# wget https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
# chmod +x minikube-linux-amd64
# sudo mv minikube-linux-amd64 /usr/local/bin/minikube

#######################################
# Install kubectl @see https://kubernetes.io/docs/tasks/tools/install-kubectl/
#######################################
# curl -LO https://storage.googleapis.com/kubernetes-release/release/(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
# chmod +x ./kubectl
# kubectl version -o json 

# curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
# echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee -a /etc/apt/sources.list.d/kubernetes.list
# sudo apt-get install -y kubectl


#######################################
# Install Docker Machine KVM driver @see https://computingforgeeks.com/how-to-run-minikube-on-kvm/
#######################################
# curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-kvm2
# chmod +x docker-machine-driver-kvm2
# sudo mv docker-machine-driver-kvm2 /usr/local/bin/
# virt-host-validate
# @see: https://blog.chirathr.com/android/ubuntu/2018/08/13/fix-avd-error-ubuntu-18-04/
## minikube start then occured this
## error: failed to connect to the hypervisor
## error: Failed to connect socket to '/var/run/libvirt/libvirt-sock': Permission denied
# sudo adduser <username> kvm
# sudo chown <username> /dev/kvm

# https://www.reddit.com/r/linuxquestions/comments/bgbpim/how_to_enable_iommu_on_ubuntu_1804

#######################################
# Install Helm @see https://helm.sh/docs/intro/install/
#######################################
# curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
# chmod 700 get_helm.sh
# ./get_helm.sh